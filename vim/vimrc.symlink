" Iniciar el manejador de plugins
execute pathogen#infect()
set nocompatible
set noswapfile
set encoding=utf8
" Disable sounds
set vb t_vb="
set noerrorbells
set novisualbell

" Iniciar la syntaxis y thema de onedark
syntax on
" let g:onedark_terminal_italics=1
colorscheme onedark

" Quitar el color del background
highlight Normal ctermbg=none 
highlight SignColumn ctermbg=none 
highlight LineNr ctermbg=none 

" identacion chida para codigo
filetype plugin indent on

set timeout timeoutlen=1500
" numero de lineas
set number

set ruler
" Set Proper Tabs
set tabstop=2
set shiftwidth=2
set shiftround
set smarttab
set expandtab

set cursorline
set showmatch
set mousehide
set list
set list lcs=trail:·,space:·,tab:»·,eol:¬
set linespace=10

" el plugin de lightline ya pone el estatus chido
set noshowmode
set laststatus=2

" ya la tecla backspace funciona para borrar
set backspace=2

set wildignore+=*/tmp/*,*/vendor/*,*/node_modules/*,*/.git/*,*.so,*.swp,*.zip

" Case Insensitivity Pattern Matching
set ignorecase

" Overrides ignorecase if pattern contains upcase
set smartcase

" Enable yanking to the clipboard
" set clipboard=unnamed
set clipboard=unnamedplus
" Highlight search matches
set hls
set is

" Asignar el tipo de cursor al usar una interfaz grafica
set guicursor+=i:hor1-blinkwait0,r:hor1
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" Las @ es lo mejor de esta fuente
if has("gui_running")
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  if has("gui_gtk")
    set guifont=Fira\ Mono\ 14
    set gfn=Fira\ Mono\ 14
    set selection=inclusive
  elseif has("gui_macvim")
    set guifont=Fira\ Mono:h16
  endif
endif

" Shortcuts
let mapleader=","
" Habilitar nerdtree
map <C-k><C-b> :NERDTreeToggle<CR>
" Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Moving lines up and down
" Mover hacia abajo ctrl-j
nnoremap <C-j> :m .+1<CR>==
" Mover hacia arriba ctrl-k
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Move to beginning/end of line
nnoremap B 0
nnoremap E $

" Select all text
nnoremap vA ggVG

" Ctrl+s para save file
inoremap <C-s> <Esc>:w<CR>
nnoremap <C-s> :w<CR>

" Moverse entre los tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>
nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
" keymap para fugitive
nnoremap <Leader>gs :Gtabedit :<CR>
nnoremap <Leader>gc :Gcommit :<CR>

let c_space_errors = 1
let java_space_errors = 1
let python_space_errors = 1
let ruby_space_errors = 1

" ctrlp settings
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }

" Mardown stuff
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal = 0

" config de lightline, muestra el nombre del branch igual
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
