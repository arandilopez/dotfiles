" Iniciar el manejador de plugins
execute pathogen#infect()
" Settings de VIM
set nocompatible " No compatible con vi
set noswapfile " Sin archivos fantasma
set autoread " Leer el archivo automaticamente si sufre cambios externos de vim
set encoding=utf8 " siempre en utf8
" Disable sounds
set vb t_vb="
set noerrorbells
set visualbell

if has('termguicolors')
  set termguicolors
endif

" identacion chida para codigo
filetype plugin indent on

" Iniciar la syntaxis y thema de onedark
syntax on
let g:onedark_termcolors=256
" let g:onedark_terminal_italics=1
colorscheme onedark

set timeout timeoutlen=1500

" numero de lineas
set number

set wrap
set colorcolumn=120 " Color sobre la columna 120 para marcar que la linea ya es muy larga
" Set Proper Tabs
set tabstop=2
set shiftwidth=2
set shiftround
set smarttab
set expandtab

" set cursorline
set showmatch
set mousehide
" Caracteres para mostar espacios, tabs y fin de linea
set list
set list lcs=trail:·,space:·,tab:»·,eol:¬
" Tamaño de linea, se ve mejor en gui
set linespace=10
" el plugin de lightline ya pone el estatus chido
set noshowmode
set laststatus=2
" ya la tecla backspace funciona para borrar
set backspace=2

set wildignore+=*/tmp/*,*/vendor/*,*/node_modules/*,*/.git/*,*/log/*,*.so,*.swp,*.zip
" Case Insensitivity Pattern Matching
set ignorecase
" Overrides ignorecase if pattern contains upcase
set smartcase
" Highlight search matches
set hlsearch
set incsearch
set sc " Show count of selected lines or chars
" Asignar el tipo de cursor al usar una interfaz grafica
set guicursor+=i:hor1-blinkwait0,r:hor1
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" Switch buffer con tabs al usar vimgrep oa algo mas sobre el quickfix list
set switchbuf+=usetab,newtab

set splitbelow "Make splits default to below...
set splitright "And to the right. This feels more natural.
" Las @ es lo mejor de esta fuente
if has("gui_running")
  set guioptions-=e  "remove gui tabs
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=R
  set guioptions-=L  "remove left-hand scroll bar
  set guioptions-=l
  if has("gui_gtk")
    set guifont=Fira\ Mono\ 14
  elseif has("gui_macvim")
    set guifont=Fira\ Mono:h16
  endif
else
  set t_Co=256
endif

" Enable yanking to the clipboard
if has("macunix")
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

" Shortcuts
let mapleader=","
" Habilitar nerdtree
map <C-k><C-b> :NERDTreeToggle<CR>
" Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Moving lines up and down
" Mover hacia abajo ctrl-j
nnoremap <C-j> :m .+1<CR>==
" Mover hacia arriba ctrl-k
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Move to beginning/end of line
nnoremap B 0
nnoremap E $

" Select all text
nnoremap vA ggVG

" Ctrl+s para save file
inoremap <C-s> <Esc>:w<CR>
nnoremap <C-s> :w<CR>
nnoremap <C-S-D> yyp

" Moverse entre los tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>
nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
nnoremap <Leader>to :tabonly<CR>
" keymap para fugitive
nnoremap <Leader>gs :Gtabedit :<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gp :Gpush<CR>

nnoremap <Leader>wt :WakaTimeToday<CR>

" Clean open buffers and delete them from unlisted
nnoremap <Leader>q :Bwipeout<CR>
nnoremap <Leader>qa :bufdo :Bwipeout<CR>
nmap <Leader><space> :nohlsearch<cr>
nmap <Leader>v :tabe ~/.vimrc<cr>
"Sort PHP use statements
"http://stackoverflow.com/questions/11531073/how-do-you-sort-a-range-of-lines-by-length
vmap <Leader>su ! awk '{ print length(), $0 \| "sort -n \| cut -d\\  -f2-" }'<cr>

" Ctrlp custom open file logic
function! OpenFileInEmptyBufferOrNewTab(action, line)
  call ctrlp#exit() " Cerrar el panel de ctrlp para ver el tab o buffer actual
  let action = a:action
  " Si la accion es abrir sobre el buffer actual, pero este no es un buffer
  " vacio, entonces abrirlo sobre un tab.
  " Esto es un comportamiento como en otros editores de texto.
  if action == 'e' && bufname("%") != ''
    let action = 't'
  endif
  call call('ctrlp#acceptfile', [action, a:line])
endfunction
" ctrlp settings
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_func = { 'files': 'OpenFileInEmptyBufferOrNewTab' }
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 'ET'
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f'
	\ }

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --vimgrep
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l -i --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  " bind \ (backward slash) to grep shortcut
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Ag<Space>-i<Space>
endif

" Mardown stuff
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_conceal = 0

let c_space_errors = 1
let java_space_errors = 1
let python_space_errors = 1
let ruby_space_errors = 1

" PHP stuff
let php_sql_query = 1

let g:EditorConfig_exclude_patterns = ['fugitive://.\*']
" GVim
let g:indentLine_color_gui = '#3B4048'
let g:indentLine_char = '┊'

" config de lightline, muestra el nombre del branch igual
let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

" augroup autosourcing
"   autocmd!
"   autocmd BufWritePost .vimrc source %
" augroup END
autocmd BufWritePre * %s/\s\+$//e " Delete trailing spaces before save
